import pygame
from pygame.locals import *
from random import *

# O CODIGO DEVERÁ SOFRER ALTERAÇÕES APÓS DECIDIR OS SPRITES 

cores_plataforma = {'verde': (0,255,0),
                    'vermelho': (255,0,0),
                    'azul': (0,0,255),
                    'branco': (255,255,255),
                    'cinza':(128,128,128),
                    'dourado':(255,215,0),
                    'ciano':(0,255,255),
                    'roxo':(255,0,255),
                    'cores totais': ['verde', 'vermelho', 'azul', 'branco']}

#CLASSE 

class plataforma:
    
    def __init__(self, X, Y, L, cor, i):
        self.X = X
        self.Y = Y
        self.L = L
        self.velocidade = 2
        self.cor = cor
        self.velocida_condition = True if cor == cores_plataforma['azul'] else False
        self.vermelho =True if cor == cores_plataforma['vermelho'] else False
        
        

    def desenhar(self,TELA):
        return pygame.draw.rect(TELA, self.cor, (self.X, self.Y, self.L, 20))
    #parte de colocar o item
    

    def mover_azul(self, LARGURA):
        if self.velocida_condition:
            self.X += self.velocidade
            if self.X > LARGURA - self.L or self.X < 0:
                self.velocidade *= -1

    def sumir_vermelho(self, player, plataforma):
        if self.vermelho:
            if player.colliderect(plataforma):
                return True
    
    def get_cor(self):
        return self.cor
    

class item:
    def __init__(self, X, Y, L, cor, i):
        self.X = X
        self.Y = Y
        self.L = L
        self.velocidade = 2
        self.cor = cor
        #parte do item
        self.mola = True if cor == cores_plataforma['branco'] else False
        item = randint(1, 200)
        self.moeda =0 if item <= 100 and i !=0 else 1 if 100 < item <= 170 and i !=0 else 2 if 170 < item <= 190 and i !=0 else 3 if i!=0 else None

    def desenho(self,TELA):
        if self.mola:
            self.cor = (128,128,128)
            return pygame.draw.rect(TELA, cores_plataforma['cinza'], (self.X + 42.5, self.Y - 15, 15, 15))
        elif self.moeda == 1:
            self.cor = (255,215,0)
            return pygame.draw.rect(TELA, cores_plataforma['dourado'], (self.X + 42.5, self.Y - 15, 15, 15))
        elif self.moeda == 2:
            self.cor = (0,255,255)
            return pygame.draw.rect(TELA, cores_plataforma['ciano'], (self.X + 42.5, self.Y - 15, 15, 15))
        elif self.moeda == 3:
            self.cor = (255,0,255)
            return pygame.draw.rect(TELA, cores_plataforma['roxo'], (self.X + 42.5, self.Y - 15, 15, 15))
    
    def sumir_item(self, player, item):
        if player.colliderect(item):
                return True
    
    def get_cor(self):
        return self.cor

# FUNÇÕES

def gerar_plataformas(MAX_PLATAFORMAS):
    PLATAFORMAS = []
    for p in range (0,MAX_PLATAFORMAS):
        plataforma_aleatoria = choice(cores_plataforma['cores totais'])   
        PLATAFORMAS.append(plataforma_aleatoria)
    return PLATAFORMAS

def construir_mapa(LISTA_PLATAFORMAS,LARGURA,TELA,ALTURA):
    plataformas =[]
    plataformas_aux = []
    itens = []
    itens_aux = []
    P_Y = ALTURA -30
    for i,p in enumerate(LISTA_PLATAFORMAS):
        P_L = 100
        P_X = randint(0, LARGURA-110)
        if i == 0:
            cor = cores_plataforma['verde']
        else:
            cor = cores_plataforma[p]
        plataform = plataforma(P_X,P_Y,P_L, cor,i)
        plataform_cor = plataform.desenhar(TELA)
        plataformas.append(plataform)
        plataformas_aux.append(plataform_cor)
        if cor != cores_plataforma['azul']:
            ite = item(P_X,P_Y,P_L, cor,i)
        ite_aux = ite.desenho(TELA)
        itens.append(ite)
        itens_aux.append(ite_aux)
        print(itens_aux)
        P_Y -= 30 + randint(30, 150)
    return plataformas, plataformas_aux, itens, itens_aux 
        
def update_mapa(plataformas, plataformas_aux, itens, itens_aux, R_PLAYER):
    
    for plataforma,plataforma_aux, i in zip(plataformas,plataformas_aux, range(len(plataformas_aux))):
        if plataforma.get_cor() == cores_plataforma['vermelho'] and plataforma.sumir_vermelho(R_PLAYER, plataforma_aux):
            plataformas_aux.pop(i)
            plataformas.pop(i)
    
    for item, item_aux, i in zip(itens, itens_aux, range(len(itens_aux))):
        if item.get_cor()!= cores_plataforma['cinza'] and item_aux != None:
            if item.sumir_item(R_PLAYER, item_aux):
                itens_aux.pop(i)
                itens.pop(i) 
                if item.get_cor() == cores_plataforma['dourado']:
                    return 'moeda'
                elif item.get_cor() == cores_plataforma['ciano']:
                    return 'diamante'
                elif item.get_cor() == cores_plataforma['roxo']:
                    return 'vida'
    return False


def render_mapa(plataformas, items, LARGURA, TELA):

    for plataforma,itens in zip(plataformas, items):
        plataforma.mover_azul(LARGURA)
        plataforma.desenhar(TELA)
        itens.desenho(TELA)
    


# AREA DE TESTES RETIRAR QUANDO O CÓDIGO FOR FINALIZADO

moedas = 0
vidas = 0
diamantes = 0

LARGURA = 600
ALTURA = 800
FPS = 60
pygame.init()
fonte = pygame.font.SysFont('arial', 20, True, True)
TELA = pygame.display.set_mode((LARGURA, ALTURA))
clock = pygame.time.Clock()

MAX_PLATAFORMAS = 20

plataformas = gerar_plataformas(MAX_PLATAFORMAS)
plataformas,plataformas_aux, itens, itens_aux = construir_mapa(plataformas, LARGURA, TELA, ALTURA)

PLAYER = (254,254,0)
X_PLAYER = plataformas_aux[0][0] + 40
Y_PLAYER = plataformas_aux[0][1] - 20
rodar = True
while rodar:
    
    mensagem = f'Moedas: {moedas}'
    mensagem2 = f'Vidas: {vidas}'
    mensagem3 = f'Diamantes: {diamantes}'
    mensagem_format = fonte.render(mensagem, True, (255,255,255))
    mensagem2_format = fonte.render(mensagem2, True, (255,255,255))
    mensagem3_format = fonte.render(mensagem3, True, (255,255,255))


    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            rodar = False
        if pygame.key.get_pressed()[K_ESCAPE]:
            rodar = False    
    
    TELA.fill((0, 0, 0))    
    
    if pygame.key.get_pressed()[K_a]:
        X_PLAYER = X_PLAYER - 10
    if pygame.key.get_pressed()[K_d]:
        X_PLAYER = X_PLAYER + 10
    if pygame.key.get_pressed()[K_w]:
        Y_PLAYER = Y_PLAYER - 10
    if pygame.key.get_pressed()[K_s]:
        Y_PLAYER = Y_PLAYER + 10
    
    R_PLAYER = pygame.draw.rect(TELA, PLAYER, (X_PLAYER, Y_PLAYER, 20, 20))

    coletou = update_mapa(plataformas, plataformas_aux, itens, itens_aux, R_PLAYER)
    if coletou == 'moeda':
        moedas += 1
    elif coletou == 'diamante':
        diamantes += 1
    elif coletou == 'vida':
        vidas += 1
    
    render_mapa(plataformas, itens, LARGURA, TELA)
    
    TELA.blit(mensagem_format, (10, 10))
    TELA.blit(mensagem2_format, (10, 30))
    TELA.blit(mensagem3_format, (10, 50))

    pygame.display.update()
    clock.tick(FPS)
pygame.quit()